!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var f=10;function c(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function l(e,t,n,r){var i,o,s,u;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=c(e))>0&&s.length>i&&!s.warned){s.warned=!0;var f=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");f.name="MaxListenersExceededWarning",f.emitter=e,f.type=t,f.count=s.length,u=f,console&&console.warn&&console.warn(u)}return e}function a(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,e))}.bind(r);return i.listener=n,r.wrapFn=i,i}function p(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):v(i,i.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return f},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");f=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return c(this)},u.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var u=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw u.context=s,u}var f=i[e];if(void 0===f)return!1;if("function"==typeof f)o(f,this,t);else{var c=f.length,l=v(f,c);for(n=0;n<c;++n)o(l[n],this,t)}return!0},u.prototype.addListener=function(e,t){return l(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return l(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,a(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,a(this,e,t)),this},u.prototype.removeListener=function(e,t){var n,r,i,o,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},u.prototype.listenerCount=h,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){"use strict";n.r(t);var r,i=function(){function e(t,n){void 0===n&&(n={}),e.nRows=t,e.nColumns=t,e.nMines=n.mines||Math.floor(t+Math.pow(t,1.3))-3;var r=new Array(e.nColumns).fill(void 0).map(function(t,n){return function(t){return new Array(e.nRows).fill(void 0).map(function(e,n){return{coordinate:[t,n],isMined:!1,neighbouringMines:0}})}(n)}),i=e.nMines;do{for(var o=0;o<e.nRows;o++)for(var s=0;s<e.nColumns;s++)10===e.getRandomIntInclusive(1,10)&&!r[o][s].isMined&&i>0&&(r[o][s].isMined=!0,i--)}while(i>0);for(o=0;o<e.nRows;o++)for(s=0;s<e.nColumns;s++){var f=e.getAdjacentCoords([o,s]).map(function(e){var t=e[0],n=e[1];return r[t][n].isMined?1:0}).reduce(function(e,t){return e+t},0);r[o][s].neighbouringMines=f}e.Cells=r.map(function(e){return e.map(function(e){return new u(e)})})}return e.getRandomIntInclusive=function(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e},e.getAdjacentCoords=function(t){return[[t[0]-1,t[1]-1],[t[0]-1,t[1]],[t[0]-1,t[1]+1],[t[0],t[1]-1],[t[0],t[1]+1],[t[0]+1,t[1]-1],[t[0]+1,t[1]],[t[0]+1,t[1]+1]].filter(function(t){return t.every(function(e){return e>=0})&&t[0]<=e.nRows-1&&t[1]<=e.nColumns-1})},e.getCell=function(t){return e.Cells[t[0]][t[1]]},e.uncoverRemainingMines=function(){var t=e.Cells.flat(1).filter(function(e){return e.isMined});return t.map(function(e){return e.uncover()}),t},e}(),o=n(0),s=(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(t){var n=e.call(this)||this;return n.coordinate=t.coordinate,n.mined=t.isMined,n.neighbouringMines=t.neighbouringMines,n.flagged=!1,n.covered=!0,n.highlight=!1,n}return s(t,e),Object.defineProperty(t.prototype,"isFlagged",{get:function(){return this.flagged},enumerable:!0,configurable:!0}),t.prototype.toggleFlag=function(){return this.flagged?this.emit("unflagged"):this.emit("flagged"),this.flagged=!this.flagged,this.flagged},Object.defineProperty(t.prototype,"isCovered",{get:function(){return this.covered},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isMined",{get:function(){return this.mined},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"adjacentMines",{get:function(){return this.neighbouringMines},enumerable:!0,configurable:!0}),t.prototype.isEmpty=function(){return!this.isFlagged&&0===this.neighbouringMines&&!this.isMined},t.prototype.getAdjacentCells=function(){return i.getAdjacentCoords(this.coordinate).map(function(e){return i.getCell(e)})},t.prototype.getAdjacentCoveredCells=function(){return this.getAdjacentCells().filter(function(e){return!e.isFlagged&&e.isCovered})},t.prototype.uncover=function(){if(this.isFlagged)this.toggleFlag();else if(this.isEmpty()&&this.isCovered){this.covered=!1,this.emit("uncovered"),this.getAdjacentCoveredCells().forEach(function(e){e.uncover()})}else this.covered=!1,this.emit("uncovered")},t}(n.n(o).a.EventEmitter);n.d(t,"Cell",function(){return u}),n.d(t,"Minesweeper",function(){return i})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,